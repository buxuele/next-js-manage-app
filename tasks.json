[
    {
        "id": "c81a9c21-9835-4c5b-b9b3-802244e4a25c",
        "description": "ai \u804a\u5929\uff0c\u5217\u51fa\u5168\u90e8\u7684\u6587\u4ef6\u540d\uff0c \u4ee5\u53ca\u5185\u5bb9\u3002",
        "filename": "list_files.py",
        "content": "import os\nfrom pathlib import Path\n\n# \u76ee\u7684\uff1a\u4e3a\u4e86\u4e0e AI \u4ea4\u6d41\u66f4\u65b9\u4fbf\uff0c\n# \u5c06\u9879\u76ee\u4e2d\u6240\u6709\u4ee3\u7801\u548c\u6587\u4ef6\u5185\u5bb9\u8f93\u51fa\u5230\u4e00\u4e2a\u5730\u65b9\uff0c\u96c6\u4e2d\u7ba1\u7406\u3002\n\ndef list_and_print_files():\n    # \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\n    current_dir = Path.cwd()\n    # \u8981\u6392\u9664\u7684\u6587\u4ef6\u548c\u76ee\u5f55\u5217\u8868\n    exclude_items = [\".git\", \".idea\", \"gist_venv\"]\n    # \u8f93\u51fa\u6587\u4ef6\n    output_file = \"read_my_files.txt\"\n\n    # \u6253\u5f00\u8f93\u51fa\u6587\u4ef6\u4ee5\u5199\u5165\u7ed3\u679c\n    with open(output_file, 'w', encoding='utf-8') as out_f:\n        # \u904d\u5386\u5f53\u524d\u76ee\u5f55\n        for root, dirs, files in os.walk(current_dir, topdown=True):\n            # \u6392\u9664\u6307\u5b9a\u7684\u76ee\u5f55\n            dirs[:] = [d for d in dirs if d not in exclude_items]\n            # \u6392\u9664\u6307\u5b9a\u7684\u6587\u4ef6\n            files[:] = [f for f in files if f not in exclude_items]\n\n            # \u5904\u7406\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\n            for name in files:\n                file_path = Path(root) / name\n                # \u83b7\u53d6\u76f8\u5bf9\u8def\u5f84\u4ee5\u4fbf\u8f93\u51fa\u66f4\u7b80\u6d01\n                relative_path = file_path.relative_to(current_dir)\n                # \u683c\u5f0f\u5316\u8f93\u51fa\n                output = f\"\\n\u6587\u4ef6: {relative_path}\\n\"\n                print(output.strip())  # \u6253\u5370\u5230\u63a7\u5236\u53f0\n                out_f.write(output)  # \u5199\u5165\u6587\u4ef6\n\n                # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u4e3a\u7a7a\n                if file_path.stat().st_size == 0:\n                    output = \"\u5185\u5bb9: \u6b64\u6587\u4ef6\u4e3a\u7a7a\\n\"\n                    print(output.strip())\n                    out_f.write(output)\n                    continue\n\n                try:\n                    # \u5c1d\u8bd5\u4ee5\u6587\u672c\u5f62\u5f0f\u8bfb\u53d6\u6587\u4ef6\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        content = f.read()\n                        if content.strip() == \"\":\n                            output = \"\u5185\u5bb9: \u6b64\u6587\u4ef6\u4e3a\u7a7a\\n\"\n                        else:\n                            output = f\"\u5185\u5bb9:\\n{content}\\n\"\n                        print(output.strip())  # \u6253\u5370\u5230\u63a7\u5236\u53f0\n                        out_f.write(output)  # \u5199\u5165\u6587\u4ef6\n                except UnicodeDecodeError:\n                    output = \"\u5185\u5bb9: [\u65e0\u6cd5\u4f5c\u4e3a\u6587\u672c\u8bfb\u53d6\uff0c\u53ef\u80fd\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6]\\n\"\n                    print(output.strip())\n                    out_f.write(output)\n                except PermissionError:\n                    output = \"\u5185\u5bb9: [\u6743\u9650\u88ab\u62d2\u7edd]\\n\"\n                    print(output.strip())\n                    out_f.write(output)\n                except Exception as e:\n                    output = f\"\u5185\u5bb9: [\u8bfb\u53d6\u6587\u4ef6\u51fa\u9519: {e}]\\n\"\n                    print(output.strip())\n                    out_f.write(output)\n\n            # \u5904\u7406\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6bcf\u4e2a\u5b50\u76ee\u5f55\n            for name in dirs:\n                dir_path = Path(root) / name\n                # \u83b7\u53d6\u76f8\u5bf9\u8def\u5f84\n                relative_path = dir_path.relative_to(current_dir)\n                # \u683c\u5f0f\u5316\u8f93\u51fa\n                output = f\"\\n\u76ee\u5f55: {relative_path}\\n\"\n                print(output.strip())  # \u6253\u5370\u5230\u63a7\u5236\u53f0\n                out_f.write(output)  # \u5199\u5165\u6587\u4ef6\n\n                # \u68c0\u67e5\u76ee\u5f55\u662f\u5426\u4e3a\u7a7a\n                is_empty = True\n                for _ in dir_path.iterdir():\n                    is_empty = False\n                    break\n                if is_empty:\n                    output = \"\u5185\u5bb9: \u6b64\u76ee\u5f55\u4e3a\u7a7a\\n\"\n                else:\n                    output = \"\u5185\u5bb9: [\u8fd9\u662f\u4e00\u4e2a\u76ee\u5f55]\\n\"\n                print(output.strip())  # \u6253\u5370\u5230\u63a7\u5236\u53f0\n                out_f.write(output)  # \u5199\u5165\u6587\u4ef6\n\nif __name__ == \"__main__\":\n    list_and_print_files()",
        "created_at": 1750266689.6582236
    },
    {
        "id": "a30864fe-99c3-464b-a889-61289327c07a",
        "description": "\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a flask app \u76ee\u5f55\u7ed3\u6784",
        "filename": "start_apps.py",
        "content": "import os\nimport json\n\n\n\"\"\"\n\n\u6b64\u6587\u4ef6\u7684\u76ee\u7684\uff1a\n\u521b\u5efa\u9879\u76ee\u76ee\u5f55\uff1a\n\n\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\u5199\u4e2a python \u4ee3\u7801\uff0c\u81ea\u52a8\u521b\u5efa\u8fd9\u4e2a\u6587\u4ef6\u7ed3\u6784/my-gist-app\n|-- app.py           # Flask \u4e3b\u5e94\u7528\u6587\u4ef6\n|-- gists.json       # \u5b58\u50a8\u6570\u636e\u7684JSON\u6587\u4ef6\n|-- static/\n|   |-- css/\n|   |-- js/\n|-- templates/\n|   |-- index.html   # \u4e3b\u9875\u9762\u6a21\u677f\n\n\n\"\"\"\n\n# Define the base directory\nbase_dir = \"my-gist-app\"\n\n# Define the directory structure\nstructure = {\n    base_dir: {\n        \"files\": [\n            \"app.py\",\n            \"gists.json\"\n        ],\n        \"dirs\": {\n            \"static\": {\n                \"dirs\": {\n                    \"css\": {},\n                    \"js\": {}\n                }\n            },\n            \"templates\": {\n                \"files\": [\n                    \"index.html\"\n                ]\n            }\n        }\n    }\n}\n\ndef create_structure(base_path, struct):\n    # Create base directory if it doesn't exist\n    os.makedirs(base_path, exist_ok=True)\n    \n    # Create files\n    if \"files\" in struct:\n        for file_name in struct[\"files\"]:\n            file_path = os.path.join(base_path, file_name)\n            # Create empty file if it doesn't exist\n            if not os.path.exists(file_path):\n                if file_name.endswith('.json'):\n                    # Initialize empty JSON file\n                    with open(file_path, 'w') as f:\n                        json.dump([], f)\n                else:\n                    # Create empty file\n                    with open(file_path, 'w') as f:\n                        pass\n    \n    # Create subdirectories\n    if \"dirs\" in struct:\n        for dir_name, dir_struct in struct[\"dirs\"].items():\n            dir_path = os.path.join(base_path, dir_name)\n            create_structure(dir_path, dir_struct)\n\ndef main():\n    # Create the structure starting from current directory\n    create_structure(base_dir, structure[base_dir])\n    print(f\"File structure created successfully at ./{base_dir}\")\n\nif __name__ == \"__main__\":\n    main()",
        "created_at": 1750266896.050992
    },
    {
        "id": "bbc836d7-cff8-4e12-9958-60de44626aa3",
        "description": "\u7b80\u5355\u7684\u804a\u5929app, \u5ba2\u6237\u7aef\uff01",
        "filename": "client.py",
        "content": "# client.py\nimport socket\nimport threading\nimport sys\nimport re\nfrom datetime import datetime  # \u867d\u7136\u5ba2\u6237\u7aef\u4e0d\u751f\u6210\u65f6\u95f4\u6233\uff0c\u4f46\u53ef\u4ee5\u4fdd\u7559\u4ee5\u5907\u5c06\u6765\u4f7f\u7528\n\nHOST = '127.0.0.1'\nPORT = 65432\nBUFFER_SIZE = 1024\n\nstop_event = threading.Event()\nMY_NICKNAME = \"You\"  # \u9ed8\u8ba4\u503c\n\n\ndef receive_messages(client_socket):\n    global MY_NICKNAME\n    while not stop_event.is_set():\n        try:\n            message_bytes = client_socket.recv(BUFFER_SIZE)\n            if not message_bytes:\n                # \u4f7f\u7528 \\r \u6e05\u9664\u5f53\u524d\u884c\uff0c\u7136\u540e\u6253\u5370\u6d88\u606f\uff0c\u518d\u91cd\u7ed8\u63d0\u793a\u7b26\n                sys.stdout.write(\"\\r\" + \" \" * 80 + \"\\r\")  # \u6e05\u9664\u5f53\u524d\u884c (\u5047\u8bbe\u884c\u5bbd\u4e0d\u8d85\u8fc780)\n                sys.stdout.write(\"\u4ece\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5\u3002\\n\")\n                stop_event.set()\n                break\n\n            message = message_bytes.decode('utf-8').strip()\n\n            # \u63d0\u53d6\u6635\u79f0\u903b\u8f91 (\u5982\u679c\u9700\u8981\uff0c\u4f46\u73b0\u5728\u4e3b\u8981\u9760\u670d\u52a1\u5668\u683c\u5f0f)\n            # \u4f8b\u5982\uff1a\"\u4f60\u7684\u540d\u5b57\u662f BlueFish\"\n            name_match = re.search(r\"\u4f60\u7684\u540d\u5b57\u662f (\\w+)\", message)\n            if name_match:\n                MY_NICKNAME = name_match.group(1)\n                # print(f\"[DEBUG] My nickname is now: {MY_NICKNAME}\")\n\n            # \u6e05\u9664\u5f53\u524d\u884c\uff0c\u6253\u5370\u6d88\u606f\uff0c\u7136\u540e\u91cd\u7ed8\u63d0\u793a\u7b26\n            # \\r \u5c06\u5149\u6807\u79fb\u5230\u884c\u9996\u3002\u786e\u4fdd\u6709\u8db3\u591f\u7a7a\u683c\u6e05\u9664\u4e4b\u524d\u53ef\u80fd\u5b58\u5728\u7684\u8f93\u5165\n            current_prompt_len = len(f\"{MY_NICKNAME}: \")\n            sys.stdout.write(\"\\r\" + \" \" * (current_prompt_len + 20) + \"\\r\")  # \u6e05\u9664\u5f53\u524d\u884c\u548c\u90e8\u5206\u6f5c\u5728\u8f93\u5165\n            sys.stdout.write(f\"{message}\\n\")\n            sys.stdout.write(f\"{MY_NICKNAME}: \")  # \u91cd\u65b0\u6253\u5370\u63d0\u793a\u7b26\n            sys.stdout.flush()  # \u786e\u4fdd\u7acb\u5373\u663e\u793a\n\n        except ConnectionResetError:\n            sys.stdout.write(\"\\r\" + \" \" * 80 + \"\\r\")\n            sys.stdout.write(\"\u4e0e\u670d\u52a1\u5668\u7684\u8fde\u63a5\u5df2\u91cd\u7f6e\u3002\\n\")\n            stop_event.set()\n            break\n        except ConnectionAbortedError:\n            sys.stdout.write(\"\\r\" + \" \" * 80 + \"\\r\")\n            sys.stdout.write(\"\u8fde\u63a5\u5df2\u4e2d\u6b62\u3002\\n\")\n            stop_event.set()\n            break\n        except OSError as e:\n            if not stop_event.is_set():\n                # \u5ffd\u7565\u5957\u63a5\u5b57\u5173\u95ed\u540erecv\u7684\u9519\u8bef (e.g., WinError 10038 on Win, EBADF (9) on Linux)\n                if e.errno != 10038 and e.errno != 9:\n                    sys.stdout.write(\"\\r\" + \" \" * 80 + \"\\r\")\n                    sys.stdout.write(f\"\u63a5\u6536\u6d88\u606f\u65f6\u51fa\u9519: {e}\\n\")\n            break  # \u901a\u5e38\u610f\u5473\u7740socket\u5df2\u5173\u95ed\n        except Exception as e:\n            if not stop_event.is_set():\n                sys.stdout.write(\"\\r\" + \" \" * 80 + \"\\r\")\n                sys.stdout.write(f\"\u63a5\u6536\u65f6\u53d1\u751f\u672a\u77e5\u9519\u8bef: {e}\\n\")\n            break\n    # print(\"\u63a5\u6536\u7ebf\u7a0b\u7ed3\u675f.\")\n\n\ndef send_messages(client_socket):\n    global MY_NICKNAME\n    try:\n        while not stop_event.is_set():\n            prompt = f\"{MY_NICKNAME}: \"\n            try:\n                # \u5728 input \u524d\u5148 flush\uff0c\u786e\u4fdd\u63a5\u6536\u7ebf\u7a0b\u6253\u5370\u7684\u5185\u5bb9\u5df2\u7ecf\u663e\u793a\n                sys.stdout.flush()\n                user_input = input(prompt)\n            except EOFError:\n                sys.stdout.write(\"\\n\u68c0\u6d4b\u5230 EOF\uff0c\u6b63\u5728\u9000\u51fa...\\n\")\n                if not stop_event.is_set():\n                    try:\n                        client_socket.sendall(\"/quit\".encode('utf-8'))\n                    except:\n                        pass\n                stop_event.set()\n                break\n            except KeyboardInterrupt:\n                # \u7528\u6237\u6309Ctrl+C\u65f6\uff0cinput()\u4f1a\u629b\u51faKeyboardInterrupt\n                # \u9700\u8981\u4f18\u96c5\u5730\u5904\u7406\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5d29\u6e83\n                sys.stdout.write(\"\\n\u68c0\u6d4b\u5230 Ctrl+C\uff0c\u6b63\u5728\u9000\u51fa...\\n\")  # \u52a0\u4e00\u4e2a\u6362\u884c\uff0c\u907f\u514d\u548c\u63d0\u793a\u7b26\u6df7\u5728\u4e00\u8d77\n                if not stop_event.is_set():  # \u907f\u514d\u91cd\u590d\u53d1\u9001/quit\n                    try:\n                        client_socket.sendall(\"/quit\".encode('utf-8'))\n                    except:\n                        pass  # \u5c3d\u529b\u53d1\u9001\n                stop_event.set()\n                break  # \u9000\u51fa\u53d1\u9001\u5faa\u73af\n\n            if stop_event.is_set():\n                break\n\n            if user_input.lower() == \"/quit\":\n                try:\n                    client_socket.sendall(user_input.encode('utf-8'))\n                except:\n                    pass\n                stop_event.set()\n                sys.stdout.write(\"\u4f60\u6b63\u5728\u9000\u51fa...\\n\")\n                break\n\n            if user_input:\n                try:\n                    client_socket.sendall(user_input.encode('utf-8'))\n                except Exception as e:\n                    # \u5982\u679c\u53d1\u9001\u5931\u8d25\uff0c\u901a\u5e38\u610f\u5473\u7740\u8fde\u63a5\u6709\u95ee\u9898\n                    sys.stdout.write(f\"\\r\u53d1\u9001\u6d88\u606f\u5931\u8d25: {e}\\n\")\n                    stop_event.set()\n                    break\n    finally:\n        # print(\"\u53d1\u9001\u7ebf\u7a0b\u7ed3\u675f.\")\n        pass  # \u901a\u5e38\u4e0d\u9700\u8981\u5728\u8fd9\u91cc\u505a\u4ec0\u4e48\u7279\u6b8a\u5904\u7406\n\n\ndef start_client():\n    global MY_NICKNAME\n    MY_NICKNAME = \"\u8fde\u63a5\u4e2d...\"\n\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    receive_thread = None\n\n    try:\n        client_socket.connect((HOST, PORT))\n        # \u521d\u59cb\u7684 \"\u5df2\u8fde\u63a5\" \u548c \"\u4f60\u7684\u540d\u5b57\u662f\" \u6d88\u606f\u4f1a\u7531\u670d\u52a1\u5668\u53d1\u9001\n        # \u5ba2\u6237\u7aef\u7684 receive_messages \u4f1a\u5904\u7406\u5b83\u4eec\u5e76\u66f4\u65b0 MY_NICKNAME\n\n        receive_thread = threading.Thread(target=receive_messages, args=(client_socket,))\n        receive_thread.daemon = True\n        receive_thread.start()\n\n        send_messages(client_socket)  # \u4e3b\u7ebf\u7a0b\u5904\u7406\u53d1\u9001\n\n    except ConnectionRefusedError:\n        print(f\"\u8fde\u63a5\u88ab\u62d2\u7edd\u3002\u670d\u52a1\u5668\u662f\u5426\u5728 {HOST}:{PORT} \u8fd0\u884c?\")\n    except Exception as e:\n        print(f\"\u53d1\u751f\u9519\u8bef: {e}\")\n    finally:\n        # print(\"\\n\u5f00\u59cb\u5ba2\u6237\u7aef\u5173\u95ed\u7a0b\u5e8f...\")\n        stop_event.set()  # \u901a\u77e5\u63a5\u6536\u7ebf\u7a0b\u505c\u6b62\n\n        if receive_thread and receive_thread.is_alive():\n            # print(\"\u7b49\u5f85\u63a5\u6536\u7ebf\u7a0b\u7ed3\u675f...\")\n            receive_thread.join(timeout=0.5)\n            # if receive_thread.is_alive():\n            # print(\"\u63a5\u6536\u7ebf\u7a0b\u672a\u80fd\u53ca\u65f6\u7ed3\u675f.\")\n\n        # print(\"\u5173\u95ed\u5ba2\u6237\u7aef\u5957\u63a5\u5b57...\")\n        try:\n            # client_socket.shutdown(socket.SHUT_RDWR) # \u53ef\u80fd\u5728socket\u5df2\u5173\u95ed\u65f6\u51fa\u9519\n            pass\n        except OSError:\n            pass\n        finally:\n            client_socket.close()\n\n        # \u5728\u8fd9\u91cc\u6253\u5370\u6700\u7ec8\u7684\u5173\u95ed\u6d88\u606f\uff0c\u786e\u4fdd\u5b83\u5728\u6240\u6709\u5176\u4ed6\u8f93\u51fa\u4e4b\u540e\n        # \u7279\u522b\u662f\u5728 Windows \u4e0a\uff0cinput() \u540e\u7684 Ctrl+C \u53ef\u80fd\u9700\u8981\u7528\u6237\u518d\u6309\u4e00\u6b21 Enter \u6216\u7b49\u5f85\u8d85\u65f6\n        # \u6211\u4eec\u5e0c\u671b \"\u5ba2\u6237\u7aef\u5df2\u5173\u95ed\" \u662f\u6700\u540e\u770b\u5230\u7684\u6d88\u606f\u4e4b\u4e00\n        print(\"\u5ba2\u6237\u7aef\u5df2\u5173\u95ed\u3002\")\n        # \u5982\u679c\u5728windows\u4e0bctrl+c\u540e\u6ca1\u6709\u7acb\u5373\u9000\u51fa\uff0c\u53ef\u4ee5\u8003\u8651\u4e0b\u9762\u7684\u5f3a\u5236\u9000\u51fa\uff0c\u4f46\u4e0d\u63a8\u8350\u4f5c\u4e3a\u9996\u9009\n        # import os\n        # os._exit(0)\n\n\nif __name__ == \"__main__\":\n    start_client()",
        "created_at": 1750267810.2557156
    },
    {
        "id": "f5b1975d-9772-48b3-95cf-21215c80b322",
        "description": "\u5173\u95ed\u67d0\u4e2a\u7aef\u53e3",
        "filename": "kill_port.bat",
        "content": "@echo off\n:: \u8bbe\u7f6e\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\nset LOGFILE=C:\\Users\\Administrator\\Work\\hugging_face\\kill_port_log.txt\n\n:: \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u7aef\u53e3\u53f7\nset /p PORT=\u8bf7\u8f93\u5165\u8981\u5173\u95ed\u7684\u7aef\u53e3\u53f7\uff08\u4f8b\u5982 5060\uff09\uff1a\necho %date% %time% \u5f00\u59cb\u5173\u95ed %PORT% \u7aef\u53e3 >> %LOGFILE%\n\n:: \u9a8c\u8bc1\u8f93\u5165\u662f\u5426\u4e3a\u6709\u6548\u6570\u5b57\necho %PORT% | findstr /r \"^[0-9]*$\" >nul\nif %ERRORLEVEL% NEQ 0 (\n    echo %date% %time% \u9519\u8bef\uff1a\u8bf7\u8f93\u5165\u6709\u6548\u7684\u7aef\u53e3\u53f7 >> %LOGFILE%\n    pause\n    exit /b\n)\n\n:: \u67e5\u627e\u5360\u7528\u6307\u5b9a\u7aef\u53e3\u7684\u8fdb\u7a0b\nfor /f \"tokens=5\" %%a in ('netstat -aon ^| findstr :%PORT%') do (\n    echo %date% %time% \u627e\u5230\u5360\u7528 %PORT% \u7aef\u53e3\u7684\u8fdb\u7a0b PID: %%a >> %LOGFILE%\n    :: \u5f3a\u884c\u7ec8\u6b62\u8fdb\u7a0b\n    taskkill /PID %%a /F\n    if %ERRORLEVEL%==0 (\n        echo %date% %time% \u6210\u529f\u7ec8\u6b62 PID %%a >> %LOGFILE%\n    ) else (\n        echo %date% %time% \u9519\u8bef\uff1a\u65e0\u6cd5\u7ec8\u6b62 PID %%a >> %LOGFILE%\n        pause\n        exit /b\n    )\n)\n\n:: \u68c0\u67e5\u7aef\u53e3\u662f\u5426\u5df2\u91ca\u653e\nnetstat -aon | findstr :%PORT% >nul\nif %ERRORLEVEL%==1 (\n    echo %date% %time% \u7aef\u53e3 %PORT% \u5df2\u6210\u529f\u91ca\u653e >> %LOGFILE%\n) else (\n    echo %date% %time% \u9519\u8bef\uff1a\u7aef\u53e3 %PORT% \u4ecd\u5728\u4f7f\u7528 >> %LOGFILE%\n    pause\n    exit /b\n)\n\necho %date% %time% \u811a\u672c\u6267\u884c\u5b8c\u6210 >> %LOGFILE%\npause",
        "created_at": 1750366298.137422
    },
    {
        "id": "6b366e77-21e4-4cb8-9327-32519cce42b2",
        "description": "\u628a\u591a\u4e2a\u4ee3\u7801\u6587\u4ef6\uff0c\u62fc\u63a5\u5230\u4e00\u8d77",
        "filename": "cat_code.py",
        "content": "import os\nfrom pathlib import Path\n\n# \u76ee\u7684\uff1a\u4e3a\u4e86\u4e0e AI \u4ea4\u6d41\u66f4\u65b9\u4fbf\uff0c\n# \u5c06\u9879\u76ee\u4e2d\u6240\u6709\u4ee3\u7801\u548c\u6587\u4ef6\u5185\u5bb9\u8f93\u51fa\u5230\u4e00\u4e2a\u5730\u65b9\uff0c\u96c6\u4e2d\u7ba1\u7406\u3002\n\ndef list_and_print_files():\n    # \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\n    current_dir = Path.cwd()\n    # \u8981\u6392\u9664\u7684\u6587\u4ef6\u548c\u76ee\u5f55\u5217\u8868\n    exclude_items = [\".git\", \".idea\", \"gist_venv\", \n                     \"cat_code.py\", \"\u505a\u7684\u8fc7\u7a0b.md\"]\n    # \u8f93\u51fa\u6587\u4ef6\n    output_file = \"read_my_files.txt\"\n\n    # \u6253\u5f00\u8f93\u51fa\u6587\u4ef6\u4ee5\u5199\u5165\u7ed3\u679c\n    with open(output_file, 'w', encoding='utf-8') as out_f:\n        # \u904d\u5386\u5f53\u524d\u76ee\u5f55\n        for root, dirs, files in os.walk(current_dir, topdown=True):\n            # \u6392\u9664\u6307\u5b9a\u7684\u76ee\u5f55\n            dirs[:] = [d for d in dirs if d not in exclude_items]\n            # \u6392\u9664\u6307\u5b9a\u7684\u6587\u4ef6\n            files[:] = [f for f in files if f not in exclude_items]\n\n            # \u5904\u7406\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\n            for name in files:\n                file_path = Path(root) / name\n                # \u83b7\u53d6\u76f8\u5bf9\u8def\u5f84\u4ee5\u4fbf\u8f93\u51fa\u66f4\u7b80\u6d01\n                relative_path = file_path.relative_to(current_dir)\n                # \u683c\u5f0f\u5316\u8f93\u51fa\n                output = f\"\\n\u6587\u4ef6: {relative_path}\\n\"\n                print(output.strip())  # \u6253\u5370\u5230\u63a7\u5236\u53f0\n                out_f.write(output)  # \u5199\u5165\u6587\u4ef6\n\n                # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u4e3a\u7a7a\n                if file_path.stat().st_size == 0:\n                    output = \"\u5185\u5bb9: \u6b64\u6587\u4ef6\u4e3a\u7a7a\\n\"\n                    print(output.strip())\n                    out_f.write(output)\n                    continue\n\n                try:\n                    # \u5c1d\u8bd5\u4ee5\u6587\u672c\u5f62\u5f0f\u8bfb\u53d6\u6587\u4ef6\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        content = f.read()\n                        if content.strip() == \"\":\n                            output = \"\u5185\u5bb9: \u6b64\u6587\u4ef6\u4e3a\u7a7a\\n\"\n                        else:\n                            output = f\"\u5185\u5bb9:\\n{content}\\n\"\n                        print(output.strip())  # \u6253\u5370\u5230\u63a7\u5236\u53f0\n                        out_f.write(output)  # \u5199\u5165\u6587\u4ef6\n                except UnicodeDecodeError:\n                    output = \"\u5185\u5bb9: [\u65e0\u6cd5\u4f5c\u4e3a\u6587\u672c\u8bfb\u53d6\uff0c\u53ef\u80fd\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6]\\n\"\n                    print(output.strip())\n                    out_f.write(output)\n                except PermissionError:\n                    output = \"\u5185\u5bb9: [\u6743\u9650\u88ab\u62d2\u7edd]\\n\"\n                    print(output.strip())\n                    out_f.write(output)\n                except Exception as e:\n                    output = f\"\u5185\u5bb9: [\u8bfb\u53d6\u6587\u4ef6\u51fa\u9519: {e}]\\n\"\n                    print(output.strip())\n                    out_f.write(output)\n\n            # \u5904\u7406\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6bcf\u4e2a\u5b50\u76ee\u5f55\n            for name in dirs:\n                dir_path = Path(root) / name\n                # \u83b7\u53d6\u76f8\u5bf9\u8def\u5f84\n                relative_path = dir_path.relative_to(current_dir)\n                # \u683c\u5f0f\u5316\u8f93\u51fa\n                output = f\"\\n\u76ee\u5f55: {relative_path}\\n\"\n                print(output.strip())  # \u6253\u5370\u5230\u63a7\u5236\u53f0\n                out_f.write(output)  # \u5199\u5165\u6587\u4ef6\n\n                # \u68c0\u67e5\u76ee\u5f55\u662f\u5426\u4e3a\u7a7a\n                is_empty = True\n                for _ in dir_path.iterdir():\n                    is_empty = False\n                    break\n                if is_empty:\n                    output = \"\u5185\u5bb9: \u6b64\u76ee\u5f55\u4e3a\u7a7a\\n\"\n                else:\n                    output = \"\u5185\u5bb9: [\u8fd9\u662f\u4e00\u4e2a\u76ee\u5f55]\\n\"\n                print(output.strip())  # \u6253\u5370\u5230\u63a7\u5236\u53f0\n                out_f.write(output)  # \u5199\u5165\u6587\u4ef6\n\nif __name__ == \"__main__\":\n    list_and_print_files()\n\n    ",
        "created_at": 1750642063.5537515
    }
]